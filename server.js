// Generated by CoffeeScript 1.5.0-pre
(function() {
  var createHAR, listening, page, port, server, system;

  page = require("webpage").create();

  server = require("webserver").create();

  system = require("system");

  if (!Date.prototype.toISOString) {
    Date.prototype.toISOString = function() {
      var ms, pad;
      pad = function(n) {
        if (n < 10) {
          return '0' + n;
        } else {
          return n;
        }
      };
      ms = function(n) {
        if (n < 10) {
          return '00' + n;
        } else {
          if (n < 100) {
            return '0' + n;
          } else {
            return n;
          }
        }
      };
      return this.getFullYear() + '-' + pad(this.getMonth() + 1) + '-' + pad(this.getDate()) + 'T' + pad(this.getHours()) + ':' + pad(this.getMinutes()) + ':' + pad(this.getSeconds()) + '.' + ms(this.getMilliseconds()) + 'Z';
    };
  }

  createHAR = function(address, title, startTime, resources, content) {
    var entries;
    entries = [];
    resources.forEach(function(resource) {
      var endReply, request, startReply;
      request = resource.request;
      startReply = resource.startReply;
      endReply = resource.endReply;
      if (!request || !startReply || !endReply) {
        return;
      }
      return entries.push({
        startedDateTime: request.time.toISOString(),
        time: endReply.time - request.time,
        request: {
          method: request.method,
          url: request.url,
          httpVersion: 'HTTP/1.1',
          cookies: [],
          headers: request.headers,
          queryString: [],
          headersSize: -1,
          bodySize: -1
        },
        response: {
          status: endReply.status,
          statusText: endReply.statusText,
          httpVersion: 'HTTP/1.1',
          cookies: [],
          headers: endReply.headers,
          redirectURL: '',
          headersSize: -1,
          bodySize: startReply.bodySize,
          content: {
            size: startReply.bodySize,
            mimeType: endReply.contentType
          }
        },
        cache: {},
        timings: {
          blocked: 0,
          dns: -1,
          connect: -1,
          send: 0,
          wait: startReply.time - request.time,
          receive: endReply.time - startReply.time,
          ssl: -1
        },
        pageref: address
      });
    });
    return {
      log: {
        version: '1.2',
        creator: {
          name: 'PhantomJS',
          version: phantom.version.major + '.' + phantom.version.minor + '.' + phantom.version.patch
        },
        pages: [
          {
            startedDateTime: startTime.toISOString(),
            id: address,
            title: title,
            pageTimings: {
              onLoad: page.endTime - page.startTime
            },
            comment: content
          }
        ],
        entries: entries
      }
    };
  };

  if (system.args.length !== 2) {
    console.log("Usage: phantomjs --load-images=no server.js <port>");
    phantom.exit(1);
  } else {
    port = system.args[1];
    listening = server.listen(port, function(request, response) {
      var regex, results;
      regex = new RegExp("[\\?&]url=([^&#]*)");
      results = regex.exec(request.url);
      if (results === null) {
        page.address = 'http://ifconfig.me/';
      } else {
        page.address = decodeURIComponent(results[1].replace(/\+/g, " "));
      }
      page.resources = [];
      page.onLoadStarted = function() {
        return page.startTime = new Date();
      };
      page.onResourceRequested = function(req) {
        return page.resources[req.id] = {
          request: req,
          startReply: null,
          endReply: null
        };
      };
      page.onResourceReceived = function(res) {
        if (res.stage === 'start') {
          page.resources[res.id].startReply = res;
        }
        if (res.stage === 'end') {
          return page.resources[res.id].endReply = res;
        }
      };
      response.statusCode = 200;
      response.setEncoding('utf8');
      response.headers = {
        "Cache": "no-cache",
        "Content-Type": "application/json; charset=utf-8"
      };
      console.log("SENDING REQUEST TO: " + page.address);
      return page.open(page.address, function(status) {
        var har;
        if (status !== 'success') {
          console.log("FAIL to load the address: " + page.ddress);
          return response.write('{ "error" : 1, "success" : 0, "status" : "fail" }');
        } else {
          console.log("GOT REPLY FROM SERVER!");
          page.endTime = new Date();
          page.title = page.evaluate(function() {
            return document.title;
          });
          har = createHAR(page.address, page.title, page.startTime, page.resources, page.content);
          response.write(JSON.stringify(har, void 0, 4));
          return response.close();
        }
      });
    });
    if (!listening) {
      console.log("could not create web server listening on port " + port);
      phantom.exit();
    }
  }

}).call(this);
